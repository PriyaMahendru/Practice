Assertions let us test the assumptions we make during development but the Assertion code basically evaporates when the program is deployed, leaving behind no overhead or debugging code to track down and remove.
-They make the code cleaner and tighter.Need to be enabled else by default they are inactive.
With assertions:
public int method(int num);{
assert(num>=0);
useNum(int num);}

Without assertions:
public int method(int num);{
useNum(int num);}

Simple version :
assert(y>=x):"y is "+y+"x is"+x; - this expression's string value is added to the stack trace which helps in debugging.

Enabling assertions:
java -ea com.name
or
java -enableassertions com.name

Disabling assertions:
java -da com.name
or
java -disableassertions com.name
we can also selectively enable and disable assertions for some classes or packages.

Selective Enabling and Disabling:
With no arguments (as in the preceding examples) Enables or disables assertions in all classes, except for the system classes.

With a package name Enables or disables assertions in the package specified and in any packages below this package in the same directory hierarchy (more on that in a moment).

With a class name Enables or disables assertions in the class specified.

You can combine switches to, say, disable assertions in a single class but keep them enabled for all others as follows:

java -ea  -da:com.geeksanonymous.Foo

java -ea -da:com.geeksanonymous... -enable in general but disable in package and sub packages of com.geeksanonymous

java -ea -dsa - enable in general but disable for system classes.

Using Assertions Appropriately:
1)Don’t Use Assertions to Validate Arguments to a public Method!
You don’t want publicly accessible code that works only conditionally, depending on whether assertions are enabled.
If you need to validate public method arguments, you’ll probably use exceptions to throw, say, an IllegalArgumentException if the values passed to the public method are invalid.
2)Do Use Assertions to Validate Arguments to a private Method!
3)Don’t Use Assertions to Validate Command-Line Arguments!
This is really just a special case of the “Do not use assertions to validate arguments to a public method” rule. If your program requires command-line arguments, you’ll probably use the exception mechanism to enforce them.
4)Do Use Assertions, Even in public Methods, to Check for Cases That You Know Are Never, Ever Supposed to Happen!We can use assert false to cause an AssertionError to be thrown immediately if you ever do reach that code.
5)Don’t Use assert Expressions That Can Cause Side Effects!
The rule is that an assert expression should leave the program in the same state it was in before the expression! Think about it. assert expressions aren’t guaranteed to always run, so you don’t want your code to behave differently depending on whether assertions are enabled.
